data.frame(
country = rep(NA,6),
best_params = rep(NA,6),
metrics = rep(NA,6),
best_threshold = rep(NA,6),
best_f1 = rep(NA,6)
)
glimpse(unlabelled_country)
labelled_data = read_dta("ML su dati GGS/Preparazione e dataset per PML/readyforMACHINE.dta")
# first attempt to coerce data using labelled dataframe
clean_country = clean_ggs(
labeled_data = labeled_data,
unlabeled_data = unlabelled_country,
NAs_char = c("","\\.a"))
labeled_data = read_dta("ML su dati GGS/Preparazione e dataset per PML/readyforMACHINE.dta")
rm(labelled_data)
# first attempt to coerce data using labelled dataframe
clean_country = clean_ggs(
labeled_data = labeled_data,
unlabeled_data = unlabelled_country,
NAs_char = c("","\\.a"))
clean1 = unlabelled_country |>
mutate(
across(where(is.character), as.factor)
) |>
mutate(
across(where(~ is.factor(.x) && nlevels(.x) > 50), as.numeric)
)
glimpse(clean1)
clean1 = unlabelled_country |>
mutate(
across(where(is.character), as.factor)
) |>
mutate(
across(where(~ is.factor(.x) && nlevels(.x) > 100), as.numeric)
)
glimpse(clean1)
clean1 = unlabelled_country |>
filter(!is.na(newchildren)) |>
mutate(
across(where(is.character), as.factor)
) |>
mutate(
across(where(~ is.factor(.x) && nlevels(.x) > 100), as.numeric)
)
glimpse(clean1)
clean1 = unlabelled_country |>
filter(!is.na(newchildren)) |>
mutate(
across(where(is.character), as.factor)
)
glimpse(clean1)
glimpse(unlabelled_country)
clean1 = unlabelled_country |>
filter(!is.na(newchildren)) |>
mutate(
across(everything(), as.factor)
)
glimpse(clean1)
clean1 = unlabelled_country |>
filter(!is.na(newchildren)) |>
mutate(
across(everything(), as.factor)
) |>
mutate(
across(where(~ is.factor(.x) && nlevels(.x) > 50), as.numeric)
)
glimpse(clean1)
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# First lets extract the LABELED DATA in order to get the variable type right
labeled_data = read_dta("ML su dati GGS/Preparazione e dataset per PML/readyforMACHINE.dta")
# Read in data
unlabeled_data = fread(
"~/Desktop/Code/ML su dati GGS/Preparazione e dataset per PML/readyforMACHINE_numeric.csv")
# Data cleaning
ggs = clean_ggs(labeled_data = labeled_data,
unlabeled_data = unlabeled_data,
NAs_char = c("","\\.a"))
clean2 =
clean1 |>
mutate(
across(where(is.factor),
~ replace_with_na(.))
)
# handling empty or weird value
replace_with_na = function(x) {
x = gsub("^$|^\\.a$", NA, x) # Replacing special chars with NA
x
}
clean2 =
clean1 |>
mutate(
across(where(is.factor),
~ replace_with_na(.))
)
glimpse(clean2)
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
unlabelled_country = fread(
"~/Desktop/Code/ML su dati GGS/Data csv/GGS_Wave_ALL.csv")
table(unlabelled_country$var_country, useNA = "always")
# SECOND ATTEMPT, manually coercing everything to factor and then to number once again
# if they have more than 50 levels
clean1 = unlabelled_country |>
filter(!is.na(newchildren)) |>
mutate(
across(everything(), as.factor)
) |>
mutate(
across(where(~ is.factor(.x) && nlevels(.x) > 50), as.numeric)
)
glimpse(clean1)
# handling empty or weird value
replace_with_na = function(x) {
x = gsub("^$|^\\.a$", NA, x) # Replacing special chars with NA
x
}
clean2 =
clean1 |>
mutate(
across(where(is.factor),
~ replace_with_na(.))
)
glimpse(clean2)
# extracting unique countries
countries = unique(unlabelled_country$var_country)
# defining df for results
res_countries =
data.frame(
country = rep(NA,6),
best_params = rep(NA,6),
metrics = rep(NA,6),
best_threshold = rep(NA,6),
best_f1 = rep(NA,6)
)
for (i in seq_along(countries)){
ggs_country = clean2 |>
filter(var_country == countries[i])
res_country = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
res_countries[i,'country'] = countries[i]
res_countries[i,'best_params'] = res_country$best_hyperparams
res_countries[i,'metrics'] = res_country$metrics
res_countries[i,'best_threshold'] = res_country$best_threshold
res_countries[i,'best_f1'] = res_country$best_f1
}
show_notes(.Last.tune.result)
?step_novel
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# extracting unique countries
countries = unique(unlabelled_country$var_country)
# defining df for results
res_countries =
data.frame(
country = rep(NA,6),
best_params = rep(NA,6),
metrics = rep(NA,6),
best_threshold = rep(NA,6),
best_f1 = rep(NA,6)
)
for (i in seq_along(countries)){
ggs_country = clean2 |>
filter(var_country == countries[i])
res_country = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
res_countries[i,'country'] = countries[i]
res_countries[i,'best_params'] = res_country$best_hyperparams
res_countries[i,'metrics'] = res_country$metrics
res_countries[i,'best_threshold'] = res_country$best_threshold
res_countries[i,'best_f1'] = res_country$best_f1
}
show_notes(.Last.tune.result)
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
View(res_countries)
for (i in seq_along(countries)){
ggs_country = clean2 |>
filter(var_country == countries[i])
res_country = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
res_countries[i,'country'] = countries[i]
res_countries[i,'best_params'] = res_country$best_hyperparams
res_countries[i,'metrics'] = res_country$metrics
res_countries[i,'best_threshold'] = res_country$best_threshold
res_countries[i,'best_f1'] = res_country$best_f1
}
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
warnings()
res_countries
res_countries$metrics
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
View(res_country)
View(res_countries)
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
# defining df for results
res_countries =
list(
country,
best_params = list(),
metrics = rep(NA,6),
best_threshold = rep(NA,6),
best_f1 = rep(NA,6),
vip = rep(NA,6)
)
# defining df for results
res_countries =
list(
'country',
best_params = list(),
metrics = rep(NA,6),
best_threshold = rep(NA,6),
best_f1 = rep(NA,6),
vip = rep(NA,6)
)
View(res_countries)
res_countries[[1]]
res_countries[["best_params"]]
class(res_country$best_hyperparams)
res_countries[i,'best_params'] = res_country$best_hyperparams
# defining df for results
res_countries =
data.frame(
country = rep(NA,6),
best_params = list(),
metrics = rep(NA,6),
best_threshold = rep(NA,6),
best_f1 = rep(NA,6),
vip = rep(NA,6)
)
# defining df for results
res_countries =
data.frame(
country = list(),
best_params = list(),
metrics = list(),
best_threshold = list(),
best_f1 = list(),
vip = list()
)
# defining df for results
res_countries =
data.frame(
country = list(),
best_params = list(),
metrics = list(),
best_threshold = list(),
best_f1 = list(),
vip = list()
)
res_countries[i,'country'] = countries[i]
View(res_countries)
res_countries[i,'best_params'] = res_country$best_hyperparams
res_countries[i,'metrics'] = list(res_country$metrics)
res_countries[i,'metrics'] = res_country$metrics
res_countries[i,"vip"] = expl_counrty
res_countries[i,"vip"] = list(expl_counrty)
seq_along(countries)
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
# defining df for results
res_countries =list()
# Iterationg over single country
for (i in 1){
# taking country specific data
ggs_country = clean2 |>
filter(var_country == countries[i])
# tuning, training and fitting the model
country_model = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
# variable importance for each country
country_vip = explain_ggs(ggs_country,
country_model)
# Saving results for each country
country_res =
list(
country = countries[i],
params = country_model$best_hyperparams,
metrics = country_model$metrics,
threshold = country_model$best_threshold,
best_f1 = country_model$best_f1,
vip = country_vip
)
res_countries[[i]] = country_res
}
res_countries
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# defining df for results
res_countries =list()
# Iterationg over single country
for (i in 1){
# taking country specific data
ggs_country = clean2 |>
filter(var_country == countries[i])
# tuning, training and fitting the model
country_model = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
# variable importance for each country
country_vip = explain_ggs(ggs_country,
country_model)
# Saving results for each country
country_res =
list(
country = countries[i],
params = country_model$best_hyperparams,
metrics = country_model$metrics,
threshold = country_model$best_threshold,
best_f1 = country_model$best_f1,
vip = country_vip
)
res_countries[[i]] = country_res
}
country_vip
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# defining df for results
res_countries =list()
# Iterationg over single country
for (i in 1){
# taking country specific data
ggs_country = clean2 |>
filter(var_country == countries[i])
# tuning, training and fitting the model
country_model = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
# variable importance for each country
country_vip = explain_ggs(ggs_country,
country_model)
# Saving results for each country
country_res =
list(
country = countries[i],
params = country_model$best_hyperparams,
metrics = country_model$metrics,
threshold = country_model$best_threshold,
best_f1 = country_model$best_f1,
vip = country_vip
)
res_countries[[i]] = country_res
}
res_countries
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
View(res_countries)
res_countries[[1]]
View(res_countries)
res_countries[[2]]
res_countries[[2]]
res_countries[[2]]
res_countries[[3]]
res_countries[[4]]
res_countries[[5]]
res_countries[[6]]
res_countries[[7]]
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# defining df for results
res_countries =list()
# Iterationg over single country
for (i in 1){
# taking country specific data
ggs_country = clean2 |>
filter(var_country == countries[i])
# tuning, training and fitting the model
country_model = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
# variable importance for each country
country_vip = explain_ggs(ggs_country,
country_model)
# Saving results for each country
country_res =
list(
country = countries[i],
params = country_model$best_hyperparams,
metrics = country_model$metrics,
threshold = country_model$best_threshold,
best_f1 = country_model$best_f1,
vip = country_vip
)
res_countries[[i]] = country_res
}
country_model$grid
print(country_model$grid,n=25)
# defining the respect.unordered.factors parameter function
unordered_vars =  function(values = values) {
new_qual_param(
type = "character",
values = values,
label = c(unordered_vars = "Unordered variables")
)
}
unordered_vars(values = c("ignore","order")) |> sample(50)
unordered_vars(values = c("ignore","order")) |> value_sample(200) %>% table()
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# Iterationg over single country
for (i in 1){
# taking country specific data
ggs_country = clean2 |>
filter(var_country == countries[i])
# tuning, training and fitting the model
country_model = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
# variable importance for each country
country_vip = explain_ggs(ggs_country,
country_model)
# Saving results for each country
country_res =
list(
country = countries[i],
params = country_model$best_hyperparams,
metrics = country_model$metrics,
threshold = country_model$best_threshold,
best_f1 = country_model$best_f1,
vip = country_vip
)
res_countries[[i]] = country_res
}
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# Iterationg over single country
for (i in 1){
# taking country specific data
ggs_country = clean2 |>
filter(var_country == countries[i])
# tuning, training and fitting the model
country_model = tuning_ggs(data = ggs_country,
k_folds = 5,
prop_missing_col = .9,
response = "newchildren",
tune_class_threshold = T,
grid_size = 25)
# variable importance for each country
country_vip = explain_ggs(ggs_country,
country_model)
# Saving results for each country
country_res =
list(
country = countries[i],
params = country_model$best_hyperparams,
metrics = country_model$metrics,
threshold = country_model$best_threshold,
best_f1 = country_model$best_f1,
vip = country_vip
)
res_countries[[i]] = country_res
}
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
res_countries
res_countries[[1]]
res_countries[[2]]
res_countries[[3]]
res_countries[[4]]
res_countries[[5]]
res_countries[[6]]
source("~/Desktop/Code/ML su dati GGS/analisi PML/PML_Countries.R", echo=TRUE)
res_countries[[1]]
res_countries[[2]]
res_countries[[3]]
res_countries[[4]]
res_countries[[5]]
res_countries[[6]]
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
unlabelled_country = fread(
"~/Desktop/Code/ML su dati GGS/Data csv/GGS_Wave_ALL.csv")
View(unlabelled_country)
# IMPORTING UTILS and PACKAGES
source("~/Desktop/Code/ML su dati GGS/analisi PML/utilsGGS.R")
# First lets extract the LABELED DATA in order to get the variable type right
labeled_data = read_dta("ML su dati GGS/Preparazione e dataset per PML/readyforMACHINE.dta")
# Read in data
unlabeled_data = fread(
"~/Desktop/Code/ML su dati GGS/Preparazione e dataset per PML/readyforMACHINE_numeric.csv")
renv::snapshot()
install.packages("renv")
renv::snapshot()
setwd("~/Desktop/Code/PASPREFER-fertility-prediction-challenge")
renv::snapshot()
